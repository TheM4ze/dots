(function() {
  var Config, Os;

  Config = require('../lib/config');

  Os = require('os');

  describe('pathSeparator tests', function() {
    ({
      beforeEach: function() {}
    });
    it('Not Windows', function() {
      spyOn(Os, 'platform').andReturn(Math.random());
      expect(Config.pathSeparator()).toBe('/');
      return expect(Os.platform).toHaveBeenCalled();
    });
    return it('Windows', function() {
      spyOn(Os, 'platform').andReturn('win32');
      expect(Config.pathSeparator()).toBe('\\');
      return expect(Os.platform).toHaveBeenCalled();
    });
  });

  describe('saveFile tests', function() {
    beforeEach(function() {
      spyOn(Config, 'saveFolder').andReturn('folder');
      return spyOn(Config, 'pathSeparator').andReturn('/');
    });
    return describe('projects restoring', function() {
      return it('is a project to be restored', function() {
        atom.project.path || (atom.project.rootDirectories[0].path = 'path');
        expect(Config.saveFile()).toBe('folder/path/project.json');
        expect(Config.saveFolder).toHaveBeenCalled();
        return expect(Config.pathSeparator).toHaveBeenCalled();
      });
    });
  });

  describe('transformProjectPath tests', function() {
    it('is Windows with :', function() {
      var path;
      spyOn(Config, 'isWindows').andReturn(true);
      path = Config.transformProjectPath('c:\\path');
      return expect(path).toBe('c\\path');
    });
    it('is Windows without :', function() {
      var path;
      spyOn(Config, 'isWindows').andReturn(true);
      path = Config.transformProjectPath('path\\more');
      return expect(path).toBe('path\\more');
    });
    return it('is not windows', function() {
      var path;
      spyOn(Config, 'isWindows').andReturn(false);
      path = Config.transformProjectPath('path/more');
      return expect(path).toBe('path/more');
    });
  });

  describe('config tests', function() {
    beforeEach(function() {
      spyOn(atom.config, 'set');
      return spyOn(atom.config, 'get');
    });
    it('Contains key and value', function() {
      Config.config('key', 'val');
      expect(atom.config.set).toHaveBeenCalled();
      return expect(atom.config.get).not.toHaveBeenCalled();
    });
    it('Contains key and forced', function() {
      Config.config('key', void 0, true);
      expect(atom.config.set).toHaveBeenCalled();
      return expect(atom.config.get).not.toHaveBeenCalled();
    });
    return it('Contains key only', function() {
      Config.config('key');
      expect(atom.config.set).not.toHaveBeenCalled();
      return expect(atom.config.get).toHaveBeenCalled();
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL2hvbWUvYmFieWplc3VzLy5hdG9tL3BhY2thZ2VzL3NhdmUtc2Vzc2lvbi9zcGVjL2NvbmZpZy1zcGVjLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBLE1BQUE7O0VBQUEsTUFBQSxHQUFTLE9BQUEsQ0FBUSxlQUFSOztFQUNULEVBQUEsR0FBSyxPQUFBLENBQVEsSUFBUjs7RUFFTCxRQUFBLENBQVMscUJBQVQsRUFBZ0MsU0FBQTtJQUM5QixDQUFBO01BQUEsVUFBQSxFQUFZLFNBQUEsR0FBQSxDQUFaO0tBQUE7SUFFQSxFQUFBLENBQUcsYUFBSCxFQUFrQixTQUFBO01BQ2hCLEtBQUEsQ0FBTSxFQUFOLEVBQVUsVUFBVixDQUFxQixDQUFDLFNBQXRCLENBQWdDLElBQUksQ0FBQyxNQUFMLENBQUEsQ0FBaEM7TUFDQSxNQUFBLENBQU8sTUFBTSxDQUFDLGFBQVAsQ0FBQSxDQUFQLENBQThCLENBQUMsSUFBL0IsQ0FBb0MsR0FBcEM7YUFDQSxNQUFBLENBQU8sRUFBRSxDQUFDLFFBQVYsQ0FBbUIsQ0FBQyxnQkFBcEIsQ0FBQTtJQUhnQixDQUFsQjtXQUtBLEVBQUEsQ0FBRyxTQUFILEVBQWMsU0FBQTtNQUNaLEtBQUEsQ0FBTSxFQUFOLEVBQVUsVUFBVixDQUFxQixDQUFDLFNBQXRCLENBQWdDLE9BQWhDO01BQ0EsTUFBQSxDQUFPLE1BQU0sQ0FBQyxhQUFQLENBQUEsQ0FBUCxDQUE4QixDQUFDLElBQS9CLENBQW9DLElBQXBDO2FBQ0EsTUFBQSxDQUFPLEVBQUUsQ0FBQyxRQUFWLENBQW1CLENBQUMsZ0JBQXBCLENBQUE7SUFIWSxDQUFkO0VBUjhCLENBQWhDOztFQWNBLFFBQUEsQ0FBUyxnQkFBVCxFQUEyQixTQUFBO0lBQ3pCLFVBQUEsQ0FBVyxTQUFBO01BQ1QsS0FBQSxDQUFNLE1BQU4sRUFBYyxZQUFkLENBQTJCLENBQUMsU0FBNUIsQ0FBc0MsUUFBdEM7YUFDQSxLQUFB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TUFBTSxDQUFDLEdBQW5CLENBQXVCLENBQUMsR0FBRyxDQUFDLGdCQUE1QixDQUFBO2FBQ0EsTUFBQSxDQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBbkIsQ0FBdUIsQ0FBQyxnQkFBeEIsQ0FBQTtJQUhzQixDQUF4QjtFQWZ1QixDQUF6QjtBQWhEQSIsInNvdXJjZXNDb250ZW50IjpbIkNvbmZpZyA9IHJlcXVpcmUgJy4uL2xpYi9jb25maWcnXG5PcyA9IHJlcXVpcmUgJ29zJ1xuXG5kZXNjcmliZSAncGF0aFNlcGFyYXRvciB0ZXN0cycsIC0+XG4gIGJlZm9yZUVhY2g6IC0+XG5cbiAgaXQgJ05vdCBXaW5kb3dzJywgLT5cbiAgICBzcHlPbihPcywgJ3BsYXRmb3JtJykuYW5kUmV0dXJuKE1hdGgucmFuZG9tKCkpXG4gICAgZXhwZWN0KENvbmZpZy5wYXRoU2VwYXJhdG9yKCkpLnRvQmUoJy8nKVxuICAgIGV4cGVjdChPcy5wbGF0Zm9ybSkudG9IYXZlQmVlbkNhbGxlZCgpXG5cbiAgaXQgJ1dpbmRvd3MnLCAtPlxuICAgIHNweU9uKE9zLCAncGxhdGZvcm0nKS5hbmRSZXR1cm4oJ3dpbjMyJylcbiAgICBleHBlY3QoQ29uZmlnLnBhdGhTZXBhcmF0b3IoKSkudG9CZSgnXFxcXCcpXG4gICAgZXhwZWN0KE9zLnBsYXRmb3JtKS50b0hhdmVCZWVuQ2FsbGVkKClcblxuXG5kZXNjcmliZSAnc2F2ZUZpbGUgdGVzdHMnLCAtPlxuICBiZWZvcmVFYWNoIC0+XG4gICAgc3B5T24oQ29uZmlnLCAnc2F2ZUZvbGRlcicpLmFuZFJldHVybignZm9sZGVyJylcbiAgICBzcHlPbihDb25maWcsICdwYXRoU2VwYXJhdG9yJykuYW5kUmV0dXJuKCcvJylcblxuICBkZXNjcmliZSAncHJvamVjdHMgcmVzdG9yaW5nJywgLT5cbiAgICBpdCAnaXMgYSBwcm9qZWN0IHRvIGJlIHJlc3RvcmVkJywgLT5cbiAgICAgIGF0b20ucHJvamVjdC5wYXRoIHx8IGF0b20ucHJvamVjdC5yb290RGlyZWN0b3JpZXNbMF0ucGF0aCA9ICdwYXRoJ1xuXG4gICAgICBleHBlY3QoQ29uZmlnLnNhdmVGaWxlKCkpLnRvQmUoJ2ZvbGRlci9wYXRoL3Byb2plY3QuanNvbicpXG4gICAgICBleHBlY3QoQ29uZmlnLnNhdmVGb2xkZXIpLnRvSGF2ZUJlZW5DYWxsZWQoKVxuICAgICAgZXhwZWN0KENvbmZpZy5wYXRoU2VwYXJhdG9yKS50b0hhdmVCZWVuQ2FsbGVkKClcblxuXG5kZXNjcmliZSAndHJhbnNmb3JtUHJvamVjdFBhdGggdGVzdHMnLCAtPlxuICBpdCAnaXMgV2luZG93cyB3aXRoIDonLCAtPlxuICAgIHNweU9uKENvbmZpZywgJ2lzV2luZG93cycpLmFuZFJldHVybih0cnVlKVxuICAgIHBhdGggPSBDb25maWcudHJhbnNmb3JtUHJvamVjdFBhdGgoJ2M6XFxcXHBhdGgnKVxuICAgIGV4cGVjdChwYXRoKS50b0JlKCdjXFxcXHBhdGgnKVxuXG4gIGl0ICdpcyBXaW5kb3dzIHdpdGhvdXQgOicsIC0+XG4gICAgc3B5T24oQ29uZmlnLCAnaXNXaW5kb3dzJykuYW5kUmV0dXJuKHRydWUpXG4gICAgcGF0aCA9IENvbmZpZy50cmFuc2Zvcm1Qcm9qZWN0UGF0aCgncGF0aFxcXFxtb3JlJylcbiAgICBleHBlY3QocGF0aCkudG9CZSgncGF0aFxcXFxtb3JlJylcblxuICBpdCAnaXMgbm90IHdpbmRvd3MnLCAtPlxuICAgIHNweU9uKENvbmZpZywgJ2lzV2luZG93cycpLmFuZFJldHVybihmYWxzZSlcbiAgICBwYXRoID0gQ29uZmlnLnRyYW5zZm9ybVByb2plY3RQYXRoKCdwYXRoL21vcmUnKVxuICAgIGV4cGVjdChwYXRoKS50b0JlKCdwYXRoL21vcmUnKVxuXG5cbmRlc2NyaWJlICdjb25maWcgdGVzdHMnLCAtPlxuICBiZWZvcmVFYWNoIC0+XG4gICAgc3B5T24oYXRvbS5jb25maWcsICdzZXQnKVxuICAgIHNweU9uKGF0b20uY29uZmlnLCAnZ2V0JylcblxuICBpdCAnQ29udGFpbnMga2V5IGFuZCB2YWx1ZScsIC0+XG4gICAgQ29uZmlnLmNvbmZpZyAna2V5JywgJ3ZhbCdcbiAgICBleHBlY3QoYXRvbS5jb25maWcuc2V0KS50b0hhdmVCZWVuQ2FsbGVkKClcbiAgICBleHBlY3QoYXRvbS5jb25maWcuZ2V0KS5ub3QudG9IYXZlQmVlbkNhbGxlZCgpXG5cbiAgaXQgJ0NvbnRhaW5zIGtleSBhbmQgZm9yY2VkJywgLT5cbiAgICBDb25maWcuY29uZmlnICdrZXknLCB1bmRlZmluZWQsIHRydWVcbiAgICBleHBlY3QoYXRvbS5jb25maWcuc2V0KS50b0hhdmVCZWVuQ2FsbGVkKClcbiAgICBleHBlY3QoYXRvbS5jb25maWcuZ2V0KS5ub3QudG9IYXZlQmVlbkNhbGxlZCgpXG5cbiAgaXQgJ0NvbnRhaW5zIGtleSBvbmx5JywgLT5cbiAgICBDb25maWcuY29uZmlnICdrZXknXG4gICAgZXhwZWN0KGF0b20uY29uZmlnLnNldCkubm90LnRvSGF2ZUJlZW5DYWxsZWQoKVxuICAgIGV4cGVjdChhdG9tLmNvbmZpZy5nZXQpLnRvSGF2ZUJlZW5DYWxsZWQoKVxuIl19
